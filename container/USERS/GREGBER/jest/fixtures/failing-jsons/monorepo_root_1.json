{
  "numFailedTestSuites": 4,
  "numFailedTests": 2,
  "numPassedTestSuites": 4,
  "numPassedTests": 46,
  "numPendingTestSuites": 0,
  "numPendingTests": 0,
  "numRuntimeErrorTestSuites": 2,
  "numTotalTestSuites": 8,
  "numTotalTests": 48,
  "snapshot": {
    "added": 0,
    "didUpdate": false,
    "failure": false,
    "filesAdded": 0,
    "filesRemoved": 0,
    "filesUnmatched": 0,
    "filesUpdated": 0,
    "matched": 0,
    "total": 0,
    "unchecked": 0,
    "unmatched": 0,
    "updated": 0
  },
  "startTime": 1506696062972,
  "success": false,
  "testResults": [
    {
      "assertionResults": [
        {
          "ancestorTitles": ["testing EthNumber..."],
          "failureMessages": [],
          "fullName":
            "testing EthNumber... can take various format bigNumber can take",
          "status": "passed",
          "title": "can take various format bigNumber can take"
        },
        {
          "ancestorTitles": ["testing EthNumber..."],
          "failureMessages": [
            "Error: Failed: that's right\n    at stackFormatter (/Z/Y/node_modules/jest/node_modules/jest-jasmine2/build/expectation_result_factory.js:49:427)\n    at expectationResultFactory (/Z/Y/node_modules/jest/node_modules/jest-jasmine2/build/expectation_result_factory.js:49:591)\n    at Spec.Object.<anonymous>.Spec.addExpectationResult (/Z/Y/node_modules/jest/node_modules/jest-jasmine2/build/jasmine/Spec.js:73:70)\n    at Env.fail (/Z/Y/node_modules/jest/node_modules/jest-jasmine2/build/jasmine/Env.js:510:25)\n    at fail (/Z/Y/node_modules/jest/node_modules/jest-jasmine2/build/jasmine/jasmine_light.js:116:23)\n    at Object.<anonymous> (/Z/Y/packages/Y-core/src/eth/__tests__/types.test.ts:19:9)\n    at Object.asyncFn (/Z/Y/node_modules/jest/node_modules/jest-jasmine2/build/jasmine_async.js:124:345)\n    at resolve (/Z/Y/node_modules/jest/node_modules/jest-jasmine2/build/queue_runner.js:46:12)\n    at Promise (<anonymous>)\n    at mapper (/Z/Y/node_modules/jest/node_modules/jest-jasmine2/build/queue_runner.js:34:499)"
          ],
          "fullName": "testing EthNumber... should fail",
          "status": "failed",
          "title": "should fail"
        },
        {
          "ancestorTitles": ["testing EthNumber..."],
          "failureMessages": [],
          "fullName":
            "testing EthNumber... can handle empty and null as expected",
          "status": "passed",
          "title": "can handle empty and null as expected"
        },
        {
          "ancestorTitles": ["testing EthNumber..."],
          "failureMessages": [],
          "fullName": "testing EthNumber... should prevent toNumber for money",
          "status": "passed",
          "title": "should prevent toNumber for money"
        },
        {
          "ancestorTitles": ["testing EthNumber..."],
          "failureMessages": [],
          "fullName": "testing EthNumber... can understand unit",
          "status": "passed",
          "title": "can understand unit"
        },
        {
          "ancestorTitles": ["testing EthNumber..."],
          "failureMessages": [],
          "fullName": "testing EthNumber... can compare across unit",
          "status": "passed",
          "title": "can compare across unit"
        },
        {
          "ancestorTitles": ["testing EthNumber..."],
          "failureMessages": [],
          "fullName": "testing EthNumber... can operate across unit",
          "status": "passed",
          "title": "can operate across unit"
        },
        {
          "ancestorTitles": ["testing Address"],
          "failureMessages": [],
          "fullName": "testing Address can prevent invalid address",
          "status": "passed",
          "title": "can prevent invalid address"
        },
        {
          "ancestorTitles": ["testing Address"],
          "failureMessages": [],
          "fullName":
            "testing Address can accept valid address with or without prefix",
          "status": "passed",
          "title": "can accept valid address with or without prefix"
        },
        {
          "ancestorTitles": ["testing Address"],
          "failureMessages": [],
          "fullName": "testing Address can detect if address is empty",
          "status": "passed",
          "title": "can detect if address is empty"
        }
      ],
      "endTime": 1506696066220,
      "message":
        "  ● testing EthNumber... › should fail\n\n    Failed: that's right\n      \n      at stackFormatter (node_modules/jest/node_modules/jest-jasmine2/build/expectation_result_factory.js:49:427)\n      at Object.<anonymous> (packages/Y-core/src/eth/__tests__/types.test.ts:19:9)\n          at Promise (<anonymous>)\n",
      "name": "/X/packages/Y-core/src/eth/__tests__/types.test.ts",
      "startTime": 1506696063929,
      "status": "failed",
      "summary": ""
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": ["curry"],
          "failureMessages": [],
          "fullName": "curry simple curry",
          "status": "passed",
          "title": "simple curry"
        },
        {
          "ancestorTitles": ["curry"],
          "failureMessages": [],
          "fullName": "curry can parse middleware",
          "status": "passed",
          "title": "can parse middleware"
        },
        {
          "ancestorTitles": ["curry"],
          "failureMessages": [],
          "fullName": "curry can be used many times",
          "status": "passed",
          "title": "can be used many times"
        },
        {
          "ancestorTitles": ["curry"],
          "failureMessages": [],
          "fullName": "curry can be used with deferred functions many times",
          "status": "passed",
          "title": "can be used with deferred functions many times"
        },
        {
          "ancestorTitles": ["curry"],
          "failureMessages": [
            "Error: Failed: intentionally failed\n    at stackFormatter (/Z/Y/node_modules/jest/node_modules/jest-jasmine2/build/expectation_result_factory.js:49:427)\n    at expectationResultFactory (/Z/Y/node_modules/jest/node_modules/jest-jasmine2/build/expectation_result_factory.js:49:591)\n    at Spec.Object.<anonymous>.Spec.addExpectationResult (/Z/Y/node_modules/jest/node_modules/jest-jasmine2/build/jasmine/Spec.js:73:70)\n    at Env.fail (/Z/Y/node_modules/jest/node_modules/jest-jasmine2/build/jasmine/Env.js:510:25)\n    at fail (/Z/Y/node_modules/jest/node_modules/jest-jasmine2/build/jasmine/jasmine_light.js:116:23)\n    at Object.<anonymous> (/Z/Y/packages/Y-keeper/src/redux/doable/__tests__/learn-ramda.test.ts:75:9)\n    at Object.asyncFn (/Z/Y/node_modules/jest/node_modules/jest-jasmine2/build/jasmine_async.js:124:345)\n    at resolve (/Z/Y/node_modules/jest/node_modules/jest-jasmine2/build/queue_runner.js:46:12)\n    at Promise (<anonymous>)\n    at mapper (/Z/Y/node_modules/jest/node_modules/jest-jasmine2/build/queue_runner.js:34:499)"
          ],
          "fullName": "curry keeper jest test",
          "status": "failed",
          "title": "keeper jest test"
        }
      ],
      "endTime": 1506696066416,
      "message":
        "  ● curry › keeper jest test\n\n    Failed: intentionally failed\n      \n      at stackFormatter (node_modules/jest/node_modules/jest-jasmine2/build/expectation_result_factory.js:49:427)\n      at Object.<anonymous> (packages/Y-keeper/src/redux/doable/__tests__/learn-ramda.test.ts:75:9)\n          at Promise (<anonymous>)\n",
      "name":
        "/X/packages/Y-keeper/src/redux/doable/__tests__/learn-ramda.test.ts",
      "startTime": 1506696063883,
      "status": "failed",
      "summary": ""
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": ["testing HDKeyMaker"],
          "failureMessages": [],
          "fullName":
            "testing HDKeyMaker can create account and generate mnemonic phrase",
          "status": "passed",
          "title": "can create account and generate mnemonic phrase"
        },
        {
          "ancestorTitles": ["testing HDKeyMaker"],
          "failureMessages": [],
          "fullName":
            "testing HDKeyMaker same mnemonic will generate same keys and same order",
          "status": "passed",
          "title": "same mnemonic will generate same keys and same order"
        },
        {
          "ancestorTitles": ["testing HDKeyMaker"],
          "failureMessages": [],
          "fullName":
            "testing HDKeyMaker different mnemonic will generate different keys",
          "status": "passed",
          "title": "different mnemonic will generate different keys"
        },
        {
          "ancestorTitles": ["testing HDKeyMaker"],
          "failureMessages": [],
          "fullName":
            "testing HDKeyMaker can add more accounts, while to be restorable",
          "status": "passed",
          "title": "can add more accounts, while to be restorable"
        },
        {
          "ancestorTitles": ["testing HDKeyMaker"],
          "failureMessages": [],
          "fullName": "testing HDKeyMaker has the right type",
          "status": "passed",
          "title": "has the right type"
        },
        {
          "ancestorTitles": ["testing HDKeyMaker"],
          "failureMessages": [],
          "fullName":
            "testing HDKeyMaker can serialize then deserialize correctly",
          "status": "passed",
          "title": "can serialize then deserialize correctly"
        },
        {
          "ancestorTitles": ["testing HDKeyMaker"],
          "failureMessages": [],
          "fullName": "testing HDKeyMaker satisfy KeyMakerCreatable interface",
          "status": "passed",
          "title": "satisfy KeyMakerCreatable interface"
        }
      ],
      "endTime": 1506696066829,
      "message": "",
      "name": "/X/packages/Y-key-hd/src/__tests__/HDKeyMaker.test.ts",
      "startTime": 1506696066442,
      "status": "passed",
      "summary": ""
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": ["createGateMonitor"],
          "failureMessages": [],
          "fullName": "createGateMonitor can log/profile all actions",
          "status": "passed",
          "title": "can log/profile all actions"
        },
        {
          "ancestorTitles": ["createGateMonitor"],
          "failureMessages": [],
          "fullName": "createGateMonitor can log/profile doable async actions",
          "status": "passed",
          "title": "can log/profile doable async actions"
        }
      ],
      "endTime": 1506696066914,
      "message": "",
      "name":
        "/X/packages/Y-keeper/src/redux/middlewares/__tests__/createGateMonitor.test.ts",
      "startTime": 1506696066251,
      "status": "passed",
      "summary": ""
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": ["test protocols"],
          "failureMessages": [],
          "fullName": "test protocols can create KeyMaker",
          "status": "passed",
          "title": "can create KeyMaker"
        },
        {
          "ancestorTitles": ["test protocols"],
          "failureMessages": [],
          "fullName":
            "test protocols can pass a keyMakerCreatible class for creation",
          "status": "passed",
          "title": "can pass a keyMakerCreatible class for creation"
        },
        {
          "ancestorTitles": ["test protocols"],
          "failureMessages": [],
          "fullName":
            "test protocols can pass a keyMakerCreatible class for deserialization",
          "status": "passed",
          "title": "can pass a keyMakerCreatible class for deserialization"
        }
      ],
      "endTime": 1506696066958,
      "message": "",
      "name": "/X/packages/Y-core/src/protocols/__tests__/Keys.test.ts",
      "startTime": 1506696066853,
      "status": "passed",
      "summary": ""
    },
    {
      "assertionResults": [],
      "coverage": {},
      "endTime": 1506696067888,
      "message":
        "  ● Test suite failed to run\n\n    Cannot find module 'StyleSheet' from 'react-native-implementation.js'\n      \n      at Resolver.resolveModule (node_modules/jest-runtime/node_modules/jest-resolve/build/index.js:191:17)\n      at Object.get StyleSheet [as StyleSheet] (packages/Y-app-vault/native/node_modules/react-native/Libraries/react-native/react-native-implementation.js:95:25)\n      at Object.<anonymous> (packages/Y-app-vault/native/app/App.js:56:24)\n",
      "name": "/X/packages/Y-app-vault/native/__tests__/index.ios.js",
      "startTime": 1506696067888,
      "status": "failed",
      "summary": ""
    },
    {
      "assertionResults": [],
      "coverage": {},
      "endTime": 1506696067888,
      "message":
        "  ● Test suite failed to run\n\n    Cannot find module 'StyleSheet' from 'react-native-implementation.js'\n      \n      at Resolver.resolveModule (node_modules/jest-runtime/node_modules/jest-resolve/build/index.js:191:17)\n      at Object.get StyleSheet [as StyleSheet] (packages/Y-app-vault/native/node_modules/react-native/Libraries/react-native/react-native-implementation.js:95:25)\n      at Object.<anonymous> (packages/Y-app-vault/native/app/App.js:56:24)\n",
      "name": "/X/packages/Y-app-vault/native/__tests__/index.android.js",
      "startTime": 1506696067888,
      "status": "failed",
      "summary": ""
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": ["DoableHelper"],
          "failureMessages": [],
          "fullName": "DoableHelper can build Doable with simple do",
          "status": "passed",
          "title": "can build Doable with simple do"
        },
        {
          "ancestorTitles": ["DoableHelper"],
          "failureMessages": [],
          "fullName": "DoableHelper can build async Doable",
          "status": "passed",
          "title": "can build async Doable"
        },
        {
          "ancestorTitles": ["DoableHelper"],
          "failureMessages": [],
          "fullName": "DoableHelper can build doable with static result",
          "status": "passed",
          "title": "can build doable with static result"
        },
        {
          "ancestorTitles": ["DoableHelper"],
          "failureMessages": [],
          "fullName": "DoableHelper can build doable with reducer",
          "status": "passed",
          "title": "can build doable with reducer"
        },
        {
          "ancestorTitles": ["DoableHelper"],
          "failureMessages": [],
          "fullName": "DoableHelper can build with both do and reducer",
          "status": "passed",
          "title": "can build with both do and reducer"
        },
        {
          "ancestorTitles": ["DoableHelper"],
          "failureMessages": [],
          "fullName": "DoableHelper can test if action is a doableAction",
          "status": "passed",
          "title": "can test if action is a doableAction"
        },
        {
          "ancestorTitles": ["DoableHelper"],
          "failureMessages": [],
          "fullName": "DoableHelper an empty doable doesn't make action doable",
          "status": "passed",
          "title": "an empty doable doesn't make action doable"
        },
        {
          "ancestorTitles": ["DoableAction"],
          "failureMessages": [],
          "fullName": "DoableAction can be bind with store dispatch",
          "status": "passed",
          "title": "can be bind with store dispatch"
        },
        {
          "ancestorTitles": ["DoableActionInvoker"],
          "failureMessages": [],
          "fullName": "DoableActionInvoker will skip non-DoableAction",
          "status": "passed",
          "title": "will skip non-DoableAction"
        },
        {
          "ancestorTitles": ["DoableActionInvoker"],
          "failureMessages": [],
          "fullName": "DoableActionInvoker can invoke DoableAction",
          "status": "passed",
          "title": "can invoke DoableAction"
        },
        {
          "ancestorTitles": ["DoableActionInvoker"],
          "failureMessages": [],
          "fullName": "DoableActionInvoker can chain with other middlewares",
          "status": "passed",
          "title": "can chain with other middlewares"
        },
        {
          "ancestorTitles": ["DoableActionInvoker"],
          "failureMessages": [],
          "fullName":
            "DoableActionInvoker won't execute the action already executed",
          "status": "passed",
          "title": "won't execute the action already executed"
        },
        {
          "ancestorTitles": ["DoableActionInvoker"],
          "failureMessages": [],
          "fullName": "DoableActionInvoker can handle action exception",
          "status": "passed",
          "title": "can handle action exception"
        },
        {
          "ancestorTitles": ["DoableActionInvoker"],
          "failureMessages": [],
          "fullName": "DoableActionInvoker can invoke asyn action",
          "status": "passed",
          "title": "can invoke asyn action"
        },
        {
          "ancestorTitles": ["DoableActionLogging"],
          "failureMessages": [],
          "fullName": "DoableActionLogging can log sync actions",
          "status": "passed",
          "title": "can log sync actions"
        },
        {
          "ancestorTitles": ["DoableActionLogging"],
          "failureMessages": [],
          "fullName":
            "DoableActionLogging can log async actions upon actual completion",
          "status": "passed",
          "title": "can log async actions upon actual completion"
        },
        {
          "ancestorTitles": ["DoableActionReducer"],
          "failureMessages": [],
          "fullName": "DoableActionReducer can invoke DoableAction's reducer",
          "status": "passed",
          "title": "can invoke DoableAction's reducer"
        },
        {
          "ancestorTitles": ["DoableActionReducer"],
          "failureMessages": [],
          "fullName":
            "DoableActionReducer can merge from DoableAction's doResult",
          "status": "passed",
          "title": "can merge from DoableAction's doResult"
        },
        {
          "ancestorTitles": ["DoableActionReducer"],
          "failureMessages": [],
          "fullName":
            "DoableActionReducer will return original state for actions without reducer property",
          "status": "passed",
          "title":
            "will return original state for actions without reducer property"
        },
        {
          "ancestorTitles": ["more complex cases"],
          "failureMessages": [],
          "fullName":
            "more complex cases can handle nested dispatches in sync operation",
          "status": "passed",
          "title": "can handle nested dispatches in sync operation"
        },
        {
          "ancestorTitles": ["more complex cases"],
          "failureMessages": [],
          "fullName":
            "more complex cases can handle nested dispatches in async operation",
          "status": "passed",
          "title": "can handle nested dispatches in async operation"
        }
      ],
      "endTime": 1506696067828,
      "message": "",
      "name":
        "/X/packages/Y-keeper/src/redux/doable/__tests__/ReduxDoable.test.ts",
      "startTime": 1506696063895,
      "status": "passed",
      "summary": ""
    }
  ],
  "wasInterrupted": false
}
