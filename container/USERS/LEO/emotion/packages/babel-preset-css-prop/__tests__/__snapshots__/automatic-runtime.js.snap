// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`automatic runtime fragment 1`] = `
"export let Button = ({ loading, ...props }) => {
  return (
    <>
      <button css={{ color: 'hotpink' }} {...props} />
      {loading && <span>{'Loading...'}</span>}
    </>
  )
}


      ↓ ↓ ↓ ↓ ↓ ↓

import { jsx as _jsx } from \\"@emotion/core/jsx-runtime\\";
import { jsxs as _jsxs } from \\"@emotion/core/jsx-runtime\\";
import { Fragment as _Fragment } from \\"@emotion/core/jsx-runtime\\";
var _ref = {
  name: \\"1q24rv0-Button\\",
  styles: \\"color:hotpink;;label:Button;\\"
};
export let Button = ({
  loading,
  ...props
}) => {
  return _jsxs(_Fragment, {
    children: [_jsx(\\"button\\", {
      css: _ref,
      ...props
    }), loading && _jsx(\\"span\\", {
      children: 'Loading...'
    })]
  });
};"
`;

exports[`automatic runtime index 1`] = `
"import * as React from 'react'

export let Button = props => {
  return (
    <>
      <button
        css={{
          color: 'hotpink'
        }}
        {...props}
      />
    </>
  )
}


      ↓ ↓ ↓ ↓ ↓ ↓

import { jsx as _jsx } from \\"@emotion/core/jsx-runtime\\";
import { Fragment as _Fragment } from \\"@emotion/core/jsx-runtime\\";
import * as React from 'react';
var _ref = {
  name: \\"1q24rv0-Button\\",
  styles: \\"color:hotpink;;label:Button;\\"
};
export let Button = props => {
  return _jsx(_Fragment, {
    children: _jsx(\\"button\\", {
      css: _ref,
      ...props
    })
  });
};"
`;

exports[`automatic runtime key-after-spread 1`] = `
"export let Buttons = ({ buttons }) => {
  return (
    <div>
      {buttons.map(({ id, label, ...rest }) => (
        <button
          {...rest}
          key={id}
          css={{
            color: 'hotpink'
          }}
        >
          {label}
        </button>
      ))}
    </div>
  )
}


      ↓ ↓ ↓ ↓ ↓ ↓

import { createElement as _createElement } from \\"@emotion/core\\";
import { jsx as _jsx } from \\"@emotion/core/jsx-runtime\\";
var _ref = {
  name: \\"1f5afni-Buttons\\",
  styles: \\"color:hotpink;;label:Buttons;\\"
};
export let Buttons = ({
  buttons
}) => {
  return _jsx(\\"div\\", {
    children: buttons.map(({
      id,
      label,
      ...rest
    }) => _createElement(\\"button\\", { ...rest,
      key: id,
      css: _ref
    }, label))
  });
};"
`;

exports[`automatic runtime no-static-children 1`] = `
"export let Button = props => {
  return (
    <button
      css={{
        color: 'hotpink'
      }}
      {...props}
    />
  )
}


      ↓ ↓ ↓ ↓ ↓ ↓

import { jsx as _jsx } from \\"@emotion/core/jsx-runtime\\";
var _ref = {
  name: \\"1q24rv0-Button\\",
  styles: \\"color:hotpink;;label:Button;\\"
};
export let Button = props => {
  return _jsx(\\"button\\", {
    css: _ref,
    ...props
  });
};"
`;

exports[`automatic runtime static-children 1`] = `
"export let Button = () => {
  return (
    <button
      css={{
        color: 'hotpink'
      }}
    >
      {'Test'}
    </button>
  )
}


      ↓ ↓ ↓ ↓ ↓ ↓

import { jsx as _jsx } from \\"@emotion/core/jsx-runtime\\";
var _ref = {
  name: \\"1q24rv0-Button\\",
  styles: \\"color:hotpink;;label:Button;\\"
};
export let Button = () => {
  return _jsx(\\"button\\", {
    css: _ref,
    children: 'Test'
  });
};"
`;
