'use strict';

var fs = require('fs');
var path = require('path');
var Plugin = require('broccoli-plugin');
var walkSync = require('walk-sync');
var mkdirp = require('mkdirp');

module.exports = {
  name: 'fake-template-linter',

  lintTree: function(type, tree) {
    if (type === 'templates') {
      return new TemplateLinter(tree, {
        annotation: 'TemplateLinter'
      });
    }
  }
};

function TemplateLinter (inputNode, options) {
  Plugin.call(this, [inputNode], {
    annotation: options.annotation
  });

  this.options = options;
}
TemplateLinter.prototype = Object.create(Plugin.prototype);
TemplateLinter.prototype.constructor = TemplateLinter;

TemplateLinter.prototype.build = function () {
  var basePath = this.inputPaths[0];
  var templateFiles = walkSync(basePath)
        .filter(function(entry) {
          return /\.hbs$/.test(entry);
        });

  for (var i = 0; i < templateFiles.length; i++) {
    var templateFilePath = templateFiles[i];

    var contents = fs.readFileSync(path.join(basePath, templateFilePath), { encoding: 'utf8' });
    var testContents = 'QUnit.test("TemplateLint: ' + templateFilePath + '", function() {\n' +
          'QUnit.ok(false, "DO NOT USE BADJUJU");\n' +
          '})';
    var testFilePath = path.join(this.outputPath, templateFilePath + '-test.js');

    if (/BADJUJU/.test(contents)) {
      mkdirp.sync(path.dirname(testFilePath));

      fs.writeFileSync(testFilePath, testContents, { encoding: 'utf8' });
    }
  }
};
