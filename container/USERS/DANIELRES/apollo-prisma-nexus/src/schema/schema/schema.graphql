### This file was generated by Nexus Schema
### Do not make changes to this file directly

scalar DateTime

input DateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime!]
}

type Emojimood {
  colorOne: String!
  colorTwo: String!
  id: Int!
  Profile(
    after: ProfileWhereUniqueInput
    before: ProfileWhereUniqueInput
    first: Int
    last: Int
  ): [Profile!]!
}

input EmojimoodCreateInput {
  colorOne: String!
  colorTwo: String!
  Profile: ProfileCreateManyWithoutEmojimoodInput
}

input EmojimoodCreateOneWithoutProfileInput {
  connect: EmojimoodWhereUniqueInput
  create: EmojimoodCreateWithoutProfileInput
}

input EmojimoodCreateWithoutProfileInput {
  colorOne: String!
  colorTwo: String!
}

input EmojimoodWhereInput {
  AND: [EmojimoodWhereInput!]
  colorOne: StringFilter
  colorTwo: StringFilter
  id: IntFilter
  NOT: [EmojimoodWhereInput!]
  OR: [EmojimoodWhereInput!]
  Profile: ProfileListRelationFilter
}

input EmojimoodWhereUniqueInput {
  id: Int
}

input IntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

input IntNullableFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntNullableFilter
  notIn: [Int!]
}

type Mutation {
  createEmojimood(data: EmojimoodCreateInput!): Emojimood!
  deleteOneProfile(where: ProfileWhereUniqueInput!): Profile
  signupUser(data: UserCreateInput!): User!
}

input NestedDateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime!]
}

input NestedIntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

input NestedIntNullableFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntNullableFilter
  notIn: [Int!]
}

input NestedStringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input NestedStringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringNullableFilter
  notIn: [String!]
  startsWith: String
}

type Profile {
  bio: String
  emojimood: Emojimood
  id: Int!
  User: User
}

input ProfileCreateManyWithoutEmojimoodInput {
  connect: [ProfileWhereUniqueInput!]
  create: [ProfileCreateWithoutEmojimoodInput!]
}

input ProfileCreateOneWithoutUserInput {
  connect: ProfileWhereUniqueInput
  create: ProfileCreateWithoutUserInput
}

input ProfileCreateWithoutEmojimoodInput {
  bio: String
  user: Int!
  User: UserCreateOneWithoutProfileInput
}

input ProfileCreateWithoutUserInput {
  bio: String
  emojimood: EmojimoodCreateOneWithoutProfileInput
  user: Int!
}

input ProfileListRelationFilter {
  every: ProfileWhereInput
  none: ProfileWhereInput
  some: ProfileWhereInput
}

input ProfileWhereInput {
  AND: [ProfileWhereInput!]
  bio: StringNullableFilter
  emojimood: EmojimoodWhereInput
  emojimoodId: IntNullableFilter
  id: IntFilter
  NOT: [ProfileWhereInput!]
  OR: [ProfileWhereInput!]
  user: IntFilter
  User: UserWhereInput
  userId: IntNullableFilter
}

input ProfileWhereUniqueInput {
  id: Int
  user: Int
  userId: Int
}

type Query {
  allEmojimoods(
    after: EmojimoodWhereUniqueInput
    before: EmojimoodWhereUniqueInput
    first: Int
    last: Int
  ): [Emojimood!]!
  SearchUsers(
    after: UserWhereUniqueInput
    before: UserWhereUniqueInput
    first: Int
    last: Int
  ): [User!]!

  """
  Use this as you are a bitch
  """
  userCRUDY(id: Int): User
  users(
    after: UserWhereUniqueInput
    before: UserWhereUniqueInput
    first: Int
    last: Int
    where: UserWhereInput
  ): [User!]!
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input StringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringNullableFilter
  notIn: [String!]
  startsWith: String
}

type User {
  email: String!
  id: Int!
  name: String
  profile: Profile
  venues(
    after: VenueWhereUniqueInput
    before: VenueWhereUniqueInput
    first: Int
    last: Int
  ): [Venue!]!
}

input UserCreateInput {
  createdAt: DateTime
  email: String!
  name: String
  profile: ProfileCreateOneWithoutUserInput
  VenueAdministration: VenueAdministrationCreateManyWithoutAdminsInput
  venues: VenueCreateManyWithoutUserInput
}

input UserCreateManyWithoutVenueAdministrationInput {
  connect: [UserWhereUniqueInput!]
  create: [UserCreateWithoutVenueAdministrationInput!]
}

input UserCreateOneWithoutProfileInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutProfileInput
}

input UserCreateOneWithoutVenuesInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutVenuesInput
}

input UserCreateWithoutProfileInput {
  createdAt: DateTime
  email: String!
  name: String
  VenueAdministration: VenueAdministrationCreateManyWithoutAdminsInput
  venues: VenueCreateManyWithoutUserInput
}

input UserCreateWithoutVenueAdministrationInput {
  createdAt: DateTime
  email: String!
  name: String
  profile: ProfileCreateOneWithoutUserInput
  venues: VenueCreateManyWithoutUserInput
}

input UserCreateWithoutVenuesInput {
  createdAt: DateTime
  email: String!
  name: String
  profile: ProfileCreateOneWithoutUserInput
  VenueAdministration: VenueAdministrationCreateManyWithoutAdminsInput
}

input UserListRelationFilter {
  every: UserWhereInput
  none: UserWhereInput
  some: UserWhereInput
}

input UserWhereInput {
  AND: [UserWhereInput!]
  createdAt: DateTimeFilter
  email: StringFilter
  id: IntFilter
  name: StringNullableFilter
  NOT: [UserWhereInput!]
  OR: [UserWhereInput!]
  profile: ProfileWhereInput
  VenueAdministration: VenueAdministrationListRelationFilter
  venues: VenueListRelationFilter
}

input UserWhereUniqueInput {
  email: String
  id: Int
}

type Venue {
  id: Int!
  VenueDetails: VenueDetails!
}

input VenueAdministrationCreateManyWithoutAdminsInput {
  connect: [VenueAdministrationWhereUniqueInput!]
  create: [VenueAdministrationCreateWithoutAdminsInput!]
}

input VenueAdministrationCreateOneWithoutVenueInput {
  connect: VenueAdministrationWhereUniqueInput
  create: VenueAdministrationCreateWithoutVenueInput
}

input VenueAdministrationCreateWithoutAdminsInput {
  venue: VenueCreateOneWithoutVenueAdministrationInput
}

input VenueAdministrationCreateWithoutVenueInput {
  admins: UserCreateManyWithoutVenueAdministrationInput
}

input VenueAdministrationListRelationFilter {
  every: VenueAdministrationWhereInput
  none: VenueAdministrationWhereInput
  some: VenueAdministrationWhereInput
}

input VenueAdministrationWhereInput {
  admins: UserListRelationFilter
  AND: [VenueAdministrationWhereInput!]
  id: IntFilter
  NOT: [VenueAdministrationWhereInput!]
  OR: [VenueAdministrationWhereInput!]
  venue: VenueWhereInput
}

input VenueAdministrationWhereUniqueInput {
  id: Int
}

input VenueCreateManyWithoutUserInput {
  connect: [VenueWhereUniqueInput!]
  create: [VenueCreateWithoutUserInput!]
}

input VenueCreateOneWithoutVenueAdministrationInput {
  connect: VenueWhereUniqueInput
  create: VenueCreateWithoutVenueAdministrationInput
}

input VenueCreateWithoutUserInput {
  createdAt: DateTime
  VenueAdministration: VenueAdministrationCreateOneWithoutVenueInput!
  VenueDetails: VenueDetailsCreateOneWithoutVenueInput!
}

input VenueCreateWithoutVenueAdministrationInput {
  createdAt: DateTime
  User: UserCreateOneWithoutVenuesInput!
  VenueDetails: VenueDetailsCreateOneWithoutVenueInput!
}

type VenueDetails {
  description: String!
  id: Int!
  name: String!
}

input VenueDetailsCreateOneWithoutVenueInput {
  connect: VenueDetailsWhereUniqueInput
  create: VenueDetailsCreateWithoutVenueInput
}

input VenueDetailsCreateWithoutVenueInput {
  description: String!
  name: String!
}

input VenueDetailsWhereInput {
  AND: [VenueDetailsWhereInput!]
  description: StringFilter
  id: IntFilter
  name: StringFilter
  NOT: [VenueDetailsWhereInput!]
  OR: [VenueDetailsWhereInput!]
  Venue: VenueWhereInput
}

input VenueDetailsWhereUniqueInput {
  id: Int
}

input VenueListRelationFilter {
  every: VenueWhereInput
  none: VenueWhereInput
  some: VenueWhereInput
}

input VenueWhereInput {
  AND: [VenueWhereInput!]
  createdAt: DateTimeFilter
  id: IntFilter
  NOT: [VenueWhereInput!]
  OR: [VenueWhereInput!]
  User: UserWhereInput
  userId: IntFilter
  VenueAdministration: VenueAdministrationWhereInput
  venueAdministrationId: IntFilter
  VenueDetails: VenueDetailsWhereInput
  venueDetailsId: IntFilter
}

input VenueWhereUniqueInput {
  id: Int
  venueAdministrationId: Int
  venueDetailsId: Int
}
